import streamlit as st
import json
import io
from ftplib import FTP
import tempfile
from datetime import datetime
import os
from PIL import Image

# FTP kapcsolat be√°ll√≠t√°sok
FTP_HOST = "185.51.188.85"
FTP_USER = "pairfect"
FTP_PASS = "65Q6sjIhrF"
FTP_DATA_DIR = "public_html/games"

# Jelsz√≥ be√°ll√≠t√°sa
CORRECT_PASSWORD = "pairfect2024"

# Ikon csoportok defini√°l√°sa
icon_groups = {
    "math": {  # Tudom√°ny
        "name": "Tudom√°ny",
        "icons": ['üî¨', 'üß™', '‚öõÔ∏è', 'üßÆ', 'üî≠']
    },
    "history": {  # T√∂rt√©nelem
        "name": "T√∂rt√©nelem",
        "icons": ['‚åõ', 'üèõÔ∏è', 'üìú', 'üëë', '‚öîÔ∏è']
    },
    "language": {  # Nyelvtanul√°s
        "name": "Nyelvtanul√°s", 
        "icons": ['üó£Ô∏è', 'üî§', 'üí≠', 'üìù', '‚úèÔ∏è']
    },
    "literature": {  # Irodalom
        "name": "Irodalom",
        "icons": ['üìö', '‚úíÔ∏è', 'üìñ', 'üìú', 'üìó']
    },
    "programming": {  # Informatika
        "name": "Informatika",
        "icons": ['üíª', 'ü§ñ', 'üñ•Ô∏è', '‚å®Ô∏è', 'üì±']
    },
    "art": {  # M≈±v√©szet
        "name": "M≈±v√©szet",
        "icons": ['üé®', 'üñºÔ∏è', '‚úèÔ∏è', 'üé≠', 'üé™']
    },
    "music": {  # Szabadid≈ë
        "name": "Szabadid≈ë",
        "icons": ['üéµ', 'üéπ', 'üéº', 'üéØ', 'üé≤']
    }
}

# Session state inicializ√°l√°s
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

if 'current_icon' not in st.session_state:
    st.session_state.current_icon = None

if 'icon_category' not in st.session_state:
    st.session_state.icon_category = None

# F√°jln√©v seg√©df√ºggv√©nyek
def get_md_filename(txt_filename):
    """Markdown f√°jln√©v gener√°l√°sa a txt f√°jln√©vb≈ël"""
    return txt_filename.replace('.txt', '.md')

def get_jpg_filename(txt_filename):
    """JPG f√°jln√©v gener√°l√°sa a txt f√°jln√©vb≈ël"""
    return txt_filename.replace('.txt', '.jpg')

def check_password():
    """Jelsz√≥ ellen≈ërz√©s"""
    if not st.session_state.authenticated:
        st.title('üîí K√°rtyacsomag K√©sz√≠t≈ë - Bejelentkez√©s')
        
        password = st.text_input("K√©rlek add meg a jelsz√≥t:", type="password")
        
        if st.button("Bejelentkez√©s"):
            if password == CORRECT_PASSWORD:
                st.session_state.authenticated = True
                st.rerun()
            else:
                st.error("Helytelen jelsz√≥!")
        
        return False
    
    return True

def connect_ftp():
    """FTP kapcsolat l√©trehoz√°sa √©s v√°lt√°s a games mapp√°ra"""
    try:
        ftp = FTP(FTP_HOST)
        ftp.login(user=FTP_USER, passwd=FTP_PASS)
        
        try:
            ftp.cwd(FTP_DATA_DIR)
        except:
            # L√©trehozzuk a teljes √∫tvonalat, ha nem l√©tezik
            for dir in FTP_DATA_DIR.split('/'):
                try:
                    ftp.cwd(dir)
                except:
                    ftp.mkd(dir)
                    ftp.cwd(dir)
        
        return ftp
    except Exception as e:
        st.error(f"Hiba az FTP kapcsol√≥d√°s sor√°n: {str(e)}")
        raise e

def create_directory_if_not_exists(ftp, path):
    """K√∂nyvt√°r l√©trehoz√°sa az FTP szerveren, ha nem l√©tezik"""
    try:
        # Pr√≥b√°ljuk meg el√©rni a k√∂nyvt√°rat
        ftp.cwd(path)
        # Ha siker√ºlt, l√©pj√ºnk vissza a gy√∂k√©rbe
        ftp.cwd('/')
    except:
        # Ha nem siker√ºlt el√©rni, hozzuk l√©tre a k√∂nyvt√°rakat
        current = ''
        for folder in path.split('/'):
            if folder:
                current += '/' + folder
                try:
                    ftp.cwd(current)
                except:
                    try:
                        ftp.mkd(current)
                        st.info(f"K√∂nyvt√°r l√©trehozva: {current}")
                    except Exception as e:
                        st.error(f"Nem siker√ºlt l√©trehozni a k√∂nyvt√°rat: {current}, hiba: {str(e)}")
                        raise

def load_config():
    """JSON konfigur√°ci√≥ bet√∂lt√©se FTP-r≈ël"""
    try:
        ftp = FTP(FTP_HOST)
        ftp.login(user=FTP_USER, passwd=FTP_PASS)
        config_buffer = io.BytesIO()
        
        try:
            # Debug: Ki√≠rjuk az aktu√°lis FTP k√∂nyvt√°rat
            current_dir = ftp.pwd()
            st.info(f"FTP kezd≈ë k√∂nyvt√°r: {current_dir}")
            
            # K√∂nyvt√°rak l√©trehoz√°sa, ha nem l√©teznek
            create_directory_if_not_exists(ftp, '/public_html/games')
            
            # Bel√©p√©s a public_html/games mapp√°ba
            ftp.cwd('/public_html/games')
            
            # Debug: Ki√≠rjuk az √∫j k√∂nyvt√°rat
            new_dir = ftp.pwd()
            st.info(f"FTP c√©lk√∂nyvt√°r: {new_dir}")
            
            # Debug: List√°zzuk a k√∂nyvt√°r tartalm√°t
            st.write("K√∂nyvt√°r tartalma:")
            st.write(ftp.nlst())
            
            try:
                # data.json let√∂lt√©se
                st.info(f"data.json bet√∂lt√©se innen: ftp://{FTP_HOST}{new_dir}/data.json")
                ftp.retrbinary('RETR data.json', config_buffer.write)
                config_buffer.seek(0)
                config = json.loads(config_buffer.read().decode('utf-8'))
            except:
                st.warning("Konfigur√°ci√≥ nem tal√°lhat√≥, alap√©rtelmezett be√°ll√≠t√°sok l√©trehoz√°sa...")
                config = {
                    "games": [],
                    "categories": {
                        "math": {
                            "name": "Tudom√°ny",
                            "color": "from-blue-500 to-purple-500"
                        },
                        "history": {
                            "name": "T√∂rt√©nelem",
                            "color": "from-orange-500 to-red-500"
                        },
                        "language": {
                            "name": "Nyelvtanul√°s",
                            "color": "from-green-500 to-teal-500"
                        },
                        "literature": {
                            "name": "Irodalom",
                            "color": "from-pink-500 to-rose-500"
                        },
                        "programming": {
                            "name": "Informatika",
                            "color": "from-violet-500 to-purple-500"
                        },
                        "art": {
                            "name": "M≈±v√©szet",
                            "color": "from-yellow-500 to-orange-500"
                        },
                        "music": {
                            "name": "Szabadid≈ë",
                            "color": "from-red-500 to-pink-500"
                        }
                    }
                }
                
                # Alap√©rtelmezett konfigur√°ci√≥ ment√©se
                json_str = json.dumps(config, indent=4, ensure_ascii=False)
                json_buffer = io.BytesIO(json_str.encode('utf-8'))
                ftp.storbinary('STOR data.json', json_buffer)
                st.success("Alap√©rtelmezett konfigur√°ci√≥ l√©trehozva az FTP szerveren.")
            
            # FTP kapcsolat bez√°r√°sa
            ftp.quit()
            
            return config
            
        except Exception as e:
            st.error(f"Hiba a k√∂nyvt√°r kezel√©se sor√°n: {str(e)}")
            return None
            
    except Exception as e:
        st.error(f"FTP kapcsol√≥d√°si hiba: {str(e)}")
        return None

def save_config(config):
    """Konfigur√°ci√≥ ment√©se az FTP szerverre"""
    try:
        ftp = FTP(FTP_HOST)
        ftp.login(user=FTP_USER, passwd=FTP_PASS)
        
        try:
            # JSON string l√©trehoz√°sa
            json_str = json.dumps(config, indent=4, ensure_ascii=False)
            json_buffer = io.BytesIO(json_str.encode('utf-8'))
            
            # Bel√©p√©s a public_html/games mapp√°ba
            ftp.cwd('public_html/games')
            
            # data.json felt√∂lt√©se
            ftp.storbinary('STOR data.json', json_buffer)
            
            # FTP kapcsolat bez√°r√°sa
            ftp.quit()
            
            st.success("Konfigur√°ci√≥ sikeresen mentve az FTP szerverre.")
            return True
            
        except Exception as e:
            st.error(f"Nem siker√ºlt menteni a konfigur√°ci√≥t az FTP szerverre: {str(e)}")
            return False
            
    except Exception as e:
        st.error(f"FTP kapcsol√≥d√°si hiba: {str(e)}")
        return False

def save_card_pack(filename, content):
    """K√°rtyacsomag ment√©se FTP-re"""
    try:
        ftp = connect_ftp()
        with io.BytesIO(content.encode('utf-8')) as buffer:
            ftp.storbinary(f'STOR {filename}', buffer)
        ftp.quit()
    except Exception as e:
        st.error(f"Hiba a k√°rtyacsomag ment√©se sor√°n: {str(e)}")
        raise e

def load_card_pack(filename):
    """K√°rtyacsomag bet√∂lt√©se FTP-r≈ël"""
    try:
        ftp = connect_ftp()
        content_buffer = io.BytesIO()
        ftp.retrbinary(f'RETR {filename}', content_buffer.write)
        ftp.quit()
        content_buffer.seek(0)
        return content_buffer.read().decode('utf-8')
    except Exception as e:
        st.error(f"Hiba a k√°rtyacsomag bet√∂lt√©se sor√°n: {str(e)}")
        raise e

def upload_file_to_ftp(filename, content):
    """F√°jl felt√∂lt√©se az FTP szerverre"""
    try:
        ftp = connect_ftp()
        ftp.storbinary(f'STOR {filename}', content)
        ftp.quit()
        return True
    except Exception as e:
        st.error(f"Hiba a f√°jl felt√∂lt√©se sor√°n: {str(e)}")
        return False

def download_file_from_ftp(filename):
    """F√°jl let√∂lt√©se az FTP szerverr≈ël"""
    try:
        ftp = connect_ftp()
        content_buffer = io.BytesIO()
        try:
            ftp.retrbinary(f'RETR {filename}', content_buffer.write)
            content_buffer.seek(0)
            ftp.quit()
            return content_buffer
        except:
            ftp.quit()
            return None
    except Exception as e:
        st.error(f"Hiba a f√°jl let√∂lt√©se sor√°n: {str(e)}")
        return None

def file_exists_on_ftp(filename):
    """Ellen≈ërzi, hogy l√©tezik-e a f√°jl az FTP szerveren"""
    try:
        ftp = connect_ftp()
        files = []
        ftp.retrlines('NLST', files.append)
        ftp.quit()
        return filename in files
    except Exception as e:
        st.error(f"Hiba a f√°jl ellen≈ërz√©se sor√°n: {str(e)}")
        return False

def validate_card_content(content):
    """K√°rty√°k tartalm√°nak valid√°l√°sa"""
    if not content.strip():
        return False, "A tartalom nem lehet √ºres!"
        
    lines = content.strip().split('\n')
    
    if len(lines) < 3:
        return False, "A f√°jlnak legal√°bb 3 sort kell tartalmaznia:\n1. sor: c√≠m\n2. sor: le√≠r√°s\n3. sort√≥l: k√°rtya p√°rok"
    
    if not lines[0].strip():
        return False, "Az els≈ë sor (c√≠m) nem lehet √ºres!"
    if ';' in lines[0]:
        return False, "A c√≠m nem tartalmazhat pontosvessz≈ët!"
        
    if not lines[1].strip():
        return False, "A m√°sodik sor (le√≠r√°s) nem lehet √ºres!"
    if ';' in lines[1]:
        return False, "A le√≠r√°s nem tartalmazhat pontosvessz≈ët!"
    
    for i, line in enumerate(lines[2:], 3):
        line = line.strip()
        if not line:  # √úres sorok √°tugr√°sa
            continue
        if ';' not in line:
            return False, f"Hiba a {i}. sorban: Hi√°nyz√≥ pontosvessz≈ë!"
        parts = line.split(';')
        if len(parts) != 2:
            return False, f"Hiba a {i}. sorban: Pontosan egy pontosvessz≈ët kell tartalmaznia!"
        if not parts[0].strip() or not parts[1].strip():
            return False, f"Hiba a {i}. sorban: Mindk√©t oldal kit√∂lt√©se k√∂telez≈ë!"
            
    return True, "OK"

def icon_selector():
    """Vizu√°lis ikon v√°laszt√≥ egyedi ikon lehet≈ës√©ggel"""
    st.write("### V√°lassz ikont")
    
    # Seg√≠ts√©g az egyedi ikonokhoz
    with st.expander("Seg√≠ts√©g az ikonok haszn√°lat√°hoz"):
        st.markdown("""
        **Hogyan adhatsz meg egyedi ikont?**
        - Haszn√°lhatsz b√°rmilyen emojit (pl: üéÆ, üé≤, üéØ)
        - Az ikon maximum 2 karakter hossz√∫ lehet
        - Windows-on az emoji billenty≈±zet: Win + .
        - Mac-en az emoji billenty≈±zet: Cmd + Ctrl + Space
        - Vagy m√°solhatsz emojit b√°rmilyen emoji gy≈±jtem√©nyb≈ël
        """)
    
    # V√°laszt√°s a be√©p√≠tett √©s egyedi ikon k√∂z√∂tt
    icon_tipus = st.radio(
        "Ikon t√≠pusa",
        ["Be√©p√≠tett ikonok", "Egyedi ikon"],
        horizontal=True
    )
    
    if icon_tipus == "Egyedi ikon":
        egyedi_ikon = st.text_input(
            "Add meg az egyedi ikont:",
            max_chars=2,
            help="Itt megadhatsz b√°rmilyen emojit vagy karaktert"
        )
        if egyedi_ikon:
            st.session_state.current_icon = egyedi_ikon
            return egyedi_ikon
    else:
        # Be√©p√≠tett ikonok v√°laszt√°sa kateg√≥ri√°nk√©nt
        selected_category = st.radio(
            "Ikon kateg√≥ria",
            options=list(icon_groups.keys()),
            format_func=lambda x: icon_groups[x]["name"],
            horizontal=True
        )
        
        cols = st.columns(5)
        selected_icon = None
        
        for idx, icon in enumerate(icon_groups[selected_category]["icons"]):
            if cols[idx].button(
                icon,
                key=f"icon_{icon}",
                help=f"{icon_groups[selected_category]['name']} ikon",
                use_container_width=True
            ):
                selected_icon = icon
                st.session_state.current_icon = icon
                return selected_icon
    
    return None

def ikon_ellenorzes(ikon):
    """Ikon valid√°l√°sa"""
    if not ikon:
        return False, "Az ikon nem lehet √ºres!"
    if len(ikon) > 2:
        return False, "Az ikon maximum 2 karakter hossz√∫ lehet!"
    return True, "OK"
            
def main():
    """F≈ë program"""
    st.title('üé¥ K√°rtyacsomag szerkeszt≈ë a PairFect-hez V3')
    
    if not check_password():
        return
    
    config = load_config()
    if not config:
        st.error("Nem siker√ºlt a konfigur√°ci√≥s f√°jl bet√∂lt√©se!")
        return
    
    # Session state inicializ√°l√°sa az ikonhoz, ha m√©g nem l√©tezik
    if 'current_icon' not in st.session_state:
        st.session_state.current_icon = None
    
    categories = list(config['categories'].keys())
    category = st.selectbox(
        'V√°lassz kateg√≥ri√°t',
        categories,
        format_func=lambda x: config['categories'][x]['name']
    )
    
    edit_mode = st.checkbox('Megl√©v≈ë csomag szerkeszt√©se')
    
    # Mai d√°tum meghat√°roz√°sa alap√©rtelmezett √©rt√©kk√©nt
    current_date = datetime.now().strftime('%Y-%m-%d')
    release_date = current_date  # Alap√©rtelmezett: mai d√°tum
    
    # V√°ltoz√≥k inicializ√°l√°sa
    filename = ""
    content = """Csomag c√≠me
Feladat le√≠r√°sa
els≈ë_oldal;m√°sodik_oldal"""
    difficulty = 2
    markdown_content = ""
    image_data = None
    
    if edit_mode:
        existing_files = [game['file'] for game in config['games']]
        filename = st.selectbox('V√°lassz csomagot', existing_files)
        content = load_card_pack(filename)
        game_data = next(game for game in config['games'] if game['file'] == filename)
        difficulty = game_data['defaultDifficulty']
        st.session_state.current_icon = game_data['icon']  # Bet√∂ltj√ºk a megl√©v≈ë ikont
        
        # Megl√©v≈ë kiad√°si d√°tum bet√∂lt√©se, ha van
        release_date = game_data.get('releaseDate', current_date)
        
        # Markdown √©s k√©p f√°jlok nev√©nek meghat√°roz√°sa
        md_filename = get_md_filename(filename)
        jpg_filename = get_jpg_filename(filename)
        
        # Markdown f√°jl bet√∂lt√©se, ha l√©tezik
        md_file = download_file_from_ftp(md_filename)
        if md_file:
            markdown_content = md_file.read().decode('utf-8')
        
        # K√©p f√°jl bet√∂lt√©se el≈ën√©zethez, ha l√©tezik
        image_buffer = download_file_from_ftp(jpg_filename)
        if image_buffer:
            st.sidebar.image(image_buffer, caption=f"{jpg_filename} (megl√©v≈ë k√©p)", use_container_width=True)
    else:
        filename = st.text_input('F√°jl neve', value='', help='Add meg a f√°jl nev√©t .txt kiterjeszt√©ssel')
    
    difficulty = st.slider('Neh√©zs√©gi szint', 1, 5, difficulty)
    
    # Kiad√°si d√°tum v√°laszt√≥
    release_date = st.date_input(
        'Kiad√°si d√°tum',
        value=datetime.strptime(release_date, '%Y-%m-%d').date() if release_date else datetime.now().date(),
        help='A k√°rtyacsomag kiad√°si d√°tuma'
    ).strftime('%Y-%m-%d')
    
    # Ikon v√°laszt√≥
    selected_icon = icon_selector()
    if selected_icon:  # Ha √∫j ikont v√°lasztottak
        st.session_state.current_icon = selected_icon
        st.success(f"V√°lasztott ikon: {selected_icon}")
    
    # Mindig mutassuk az aktu√°lis ikont, ha van
    if st.session_state.current_icon:
        st.info(f"Aktu√°lis ikon: {st.session_state.current_icon}")
    
    # K√°rtyacsomag tartalom be√°ll√≠t√°sa
    st.subheader('K√°rty√°k tartalma')
    st.info("""A tartalom form√°tuma:
1. sor: A csomag c√≠me
2. sor: A feladat le√≠r√°sa
3. sort√≥l: K√°rtya p√°rok (pontosvessz≈ëvel elv√°lasztva)""")
    
    content = st.text_area(
        'Tartalom',
        value=content,
        height=300,
        help='A teljes tartalom, bele√©rtve a c√≠met, le√≠r√°st √©s a k√°rtya p√°rokat'
    )
    
    # Markdown f√°jl felt√∂lt√©se
    st.subheader('Markdown le√≠r√°s felt√∂lt√©se (opcion√°lis)')
    st.info("""A markdown (.md) f√°jl tov√°bbi inform√°ci√≥kat tartalmazhat a feladatr√≥l.
Ez jelenik meg a P√°nik gomb megnyom√°sa ut√°n a k√°rtyap√°rok alatt.""")
    
    uploaded_markdown = st.file_uploader("V√°lassz egy markdown f√°jlt", type=["md"], key="md_uploader")
    
    if uploaded_markdown is not None:
        markdown_content = uploaded_markdown.getvalue().decode('utf-8')
        with st.expander("Markdown tartalom el≈ën√©zete"):
            st.markdown(markdown_content)
    elif markdown_content:  # Ha van m√°r bet√∂lt√∂tt tartalom, de nincs √∫j felt√∂lt√©s
        with st.expander("Megl√©v≈ë markdown tartalom"):
            st.markdown(markdown_content)
    
    # K√©p felt√∂lt√©se
    st.subheader('K√©p felt√∂lt√©se (opcion√°lis)')
    st.info("""A k√©p a j√°t√©k fejl√©c√©ben jelenik meg. Aj√°nlott m√©ret: 800x200 pixel, JPG form√°tum.""")
    
    uploaded_image = st.file_uploader("V√°lassz egy k√©pet", type=["jpg", "jpeg", "png"])
    
    if uploaded_image is not None:
        # K√©p el≈ën√©zet megjelen√≠t√©se
        image_data = uploaded_image.getvalue()
        st.image(uploaded_image, caption="Felt√∂lt√∂tt k√©p el≈ën√©zete", use_container_width=True)
    
    # Ment√©s gomb
    if st.button('K√°rtyacsomag ment√©se'):
        if not filename:
            st.error('Add meg a f√°jl nev√©t!')
            return
        
        if not filename.endswith('.txt'):
            filename += '.txt'
        
        # Ikon ellen≈ërz√©se
        if not st.session_state.current_icon:
            st.error('V√°lassz ikont!')
            return
        
        is_valid_icon, icon_error = ikon_ellenorzes(st.session_state.current_icon)
        if not is_valid_icon:
            st.error(icon_error)
            return
            
        is_valid, error_msg = validate_card_content(content)
        if not is_valid:
            st.error(error_msg)
            return
            
        try:
            # TXT f√°jl (k√°rtyacsomag) ment√©se
            save_card_pack(filename, content)
            
            # Markdown f√°jl ment√©se, ha van felt√∂ltve vagy m√°r l√©tezik tartalom
            md_filename = get_md_filename(filename)
            if markdown_content:
                with io.BytesIO(markdown_content.encode('utf-8')) as md_buffer:
                    upload_file_to_ftp(md_filename, md_buffer)
            
            # K√©p ment√©se, ha van felt√∂ltve
            jpg_filename = get_jpg_filename(filename)
            if image_data is not None:
                # Konvert√°l√°s JPG form√°tumba ha sz√ºks√©ges
                if uploaded_image.type != "image/jpeg":
                    try:
                        image = Image.open(io.BytesIO(image_data))
                        output = io.BytesIO()
                        if image.mode in ("RGBA", "P"):
                            image = image.convert("RGB")
                        image.save(output, format="JPEG", quality=85)
                        output.seek(0)
                        upload_file_to_ftp(jpg_filename, output)
                    except Exception as e:
                        st.error(f"Hiba a k√©p konvert√°l√°sa sor√°n: {str(e)}")
                        return
                else:
                    with io.BytesIO(image_data) as img_buffer:
                        upload_file_to_ftp(jpg_filename, img_buffer)
            
            # Konfigur√°ci√≥ friss√≠t√©se
            if not edit_mode:
                new_game = {
                    "file": filename,
                    "defaultDifficulty": difficulty,
                    "category": category,
                    "icon": st.session_state.current_icon,
                    "releaseDate": release_date
                }
                config['games'].append(new_game)
            else:
                for game in config['games']:
                    if game['file'] == filename:
                        game.update({
                            "defaultDifficulty": difficulty,
                            "category": category,
                            "icon": st.session_state.current_icon,
                            "releaseDate": release_date
                        })
            
            save_config(config)
            
            # Sikeres ment√©s √ºzenet
            st.success(f'K√°rtyacsomag sikeresen mentve: {filename}')
            
            # Felt√∂lt√∂tt f√°jlok list√°z√°sa
            uploaded_files = [filename]
            if markdown_content:
                uploaded_files.append(md_filename)
            if image_data is not None:
                uploaded_files.append(jpg_filename)
                
            st.success(f'Felt√∂lt√∂tt f√°jlok: {", ".join(uploaded_files)}')
            
            # Jelenlegi k√°rtyacsomagok list√°z√°sa
            st.subheader('Jelenlegi k√°rtyacsomagok:')
            for game in config['games']:
                release_info = f", kiad√°s: {game.get('releaseDate', 'ismeretlen')}"
                st.write(f"{game['icon']} {game['file']} "
                        f"({config['categories'][game['category']]['name']}, "
                        f"neh√©zs√©g: {game['defaultDifficulty']}{release_info})")
                
        except Exception as e:
            st.error(f'Hiba t√∂rt√©nt a ment√©s sor√°n: {str(e)}')
            
if __name__ == '__main__':
    main()