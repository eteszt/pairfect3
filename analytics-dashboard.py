# analytics-dashboard.py
import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import altair as alt
from ftplib import FTP
import tempfile
import os

# FTP be√°ll√≠t√°sok
FTP_HOST = "ftp.pairfect.hu"
FTP_USER = "pairfect"
FTP_PASS = "65Q6sjIhrF"
DB_PATH = "/public_html/api/db/gamedata.db"  # Teljes √∫tvonal

# Oldal konfigur√°l√°sa
st.set_page_config(
    page_title="PairFect Analytics",
    page_icon="üéÆ",
    layout="wide"
)

# Adatok lek√©rdez√©se cache-el√©ssel
@st.cache_data(ttl=60)  # 1 percenk√©nt friss√ºl
def load_data():
    with st.spinner('Adatok bet√∂lt√©se...'):
        try:
            # Ideiglenes f√°jl l√©trehoz√°sa
            with tempfile.NamedTemporaryFile(delete=False) as temp_db:
                # FTP kapcsol√≥d√°s √©s f√°jl let√∂lt√©se
                with FTP(FTP_HOST) as ftp:
                    ftp.login(user=FTP_USER, passwd=FTP_PASS)
                    
                    # Adatb√°zis let√∂lt√©se
                    ftp.retrbinary(f'RETR {DB_PATH}', temp_db.write)
            
            # SQLite kapcsolat √©s adatok beolvas√°sa
            conn = sqlite3.connect(temp_db.name)
            df = pd.read_sql_query("""
                SELECT 
                    id,
                    datetime(timestamp, 'localtime') as timestamp,
                    action,
                    game_file,
                    game_title,
                    score,
                    time,
                    browser_info,
                    screen_size
                FROM game_logs
            """, conn)
            
            conn.close()
            
            # Ideiglenes f√°jl t√∂rl√©se
            os.unlink(temp_db.name)
            
            return df
            
        except Exception as e:
            st.error(f"Hiba az adatok bet√∂lt√©se sor√°n: {str(e)}")
            return pd.DataFrame()

def main():
    st.title("üéÆ PairFect Analytics Dashboard")
    
    try:
        # Adatok bet√∂lt√©se
        df = load_data()
        
        if df.empty:
            st.error("Nem siker√ºlt adatokat bet√∂lteni!")
            return
            
        # D√°tum konvert√°l√°sa
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        
        # Id≈ëszak v√°laszt√≥ √©s sz≈±r√©s
        col1, col2 = st.columns(2)
        
        # Minimum √©s maximum d√°tumok meghat√°roz√°sa
        min_date = df['timestamp'].min().date()
        max_date = df['timestamp'].max().date()
        
        with col1:
            start_date = st.date_input(
                "Kezd≈ë d√°tum",
                min_value=min_date,
                max_value=max_date,
                value=min_date
            )
        with col2:
            end_date = st.date_input(
                "V√©gs≈ë d√°tum",
                min_value=min_date,
                max_value=max_date,
                value=max_date
            )
           
        
        # D√°tum konvert√°l√°s √©s sz≈±r√©s
        start_datetime = pd.Timestamp(start_date)
        end_datetime = pd.Timestamp(end_date) + pd.Timedelta(days=1) - pd.Timedelta(seconds=1)

        # Sz≈±r√©s
        mask = (df['timestamp'] >= start_datetime) & (df['timestamp'] <= end_datetime)
        df_filtered = df.loc[mask].copy()
        
        
        # F≈ë metrik√°k
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_games = len(df_filtered[df_filtered['action'] == 'load'])
            st.metric("√ñsszes j√°t√©kind√≠t√°s", total_games)
            
        with col2:
            completed_games = len(df_filtered[df_filtered['action'] == 'complete'])
            st.metric("Befejezett j√°t√©kok", completed_games)
            
        with col3:
            completion_rate = round((completed_games / total_games * 100 if total_games > 0 else 0), 1)
            st.metric("Befejez√©si ar√°ny", f"{completion_rate}%")
        
        with col4:
            # Utols√≥ 3 √≥ra id≈ëpontj√°nak kisz√°m√≠t√°sa
            current_time = pd.Timestamp.now()  # Aktu√°lis id≈ë
            last_hours = current_time - pd.Timedelta(hours=3)
            
            # Utols√≥ 3 √≥ra j√°t√©kainak sz√°mol√°sa
            recent_starts = len(df[  # Az eredeti df-et haszn√°ljuk, nem a sz≈±rtet
                (df['action'] == 'load') & 
                (df['timestamp'] >= last_hours)
            ])
            recent_completes = len(df[  # Itt is
                (df['action'] == 'complete') & 
                (df['timestamp'] >= last_hours)
            ])
            recent_panics = len(df[  # √âs itt is
                (df['action'] == 'panic_button') & 
                (df['timestamp'] >= last_hours)
            ])

            # Egy m√©r≈ë√≥ra h√°rom √©rt√©kkel
            fig = go.Figure()
            
            # M√©r≈ë√≥ra l√©trehoz√°sa
            fig.add_trace(go.Indicator(
                mode="gauge",
                value=recent_starts,
                title={
                    'text': "Utols√≥ 3 √≥ra aktivit√°sa",
                    'font': {'size': 16, 'color': 'white'}
                },
                gauge={
                    'axis': {
                        'range': [0, max(60, recent_starts * 1.2)],
                        'tickwidth': 1,
                        'tickcolor': "white",
                        'tickfont': {'color': 'white'},
                        # Tengely pozicion√°l√°s jav√≠t√°sa
                        'tickmode': 'array',
                        'tickvals': [0, 20, 40, 60],
                    },
                    'bgcolor': "rgba(0,0,0,0)",
                    'borderwidth': 0,
                    'steps': [
                        {'range': [0, recent_starts], 'color': "rgb(59, 130, 246)", 'thickness': 0.75},
                        {'range': [0, recent_completes], 'color': "rgb(34, 197, 94)", 'thickness': 0.5},
                        {'range': [0, recent_panics], 'color': "rgb(239, 68, 68)", 'thickness': 0.25}
                    ],
                    'bar': {'color': "rgba(0,0,0,0)"}
                }
            ))
            
            # Layout be√°ll√≠t√°sa
            fig.update_layout(
                height=200,
                # Jobb oldali marg√≥ n√∂vel√©se
                margin=dict(l=30, r=30, t=40, b=40),
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                font={'color': "white"},
                # Kont√©r m√©ret√©nek be√°ll√≠t√°sa
                autosize=False,
                width=400,  # Fix sz√©less√©g
                annotations=[
                    dict(
                        text=f'Ind√≠t√°sok: {recent_starts}',
                        x=0.5,
                        y=-0.15,
                        showarrow=False,
                        font={'color': 'rgb(59, 130, 246)', 'size': 14}
                    ),
                    dict(
                        text=f'Befejez√©sek: {recent_completes}',
                        x=0.5,
                        y=-0.25,
                        showarrow=False,
                        font={'color': 'rgb(34, 197, 94)', 'size': 14}
                    ),
                    dict(
                        text=f'P√°nik: {recent_panics}',
                        x=0.5,
                        y=-0.35,
                        showarrow=False,
                        font={'color': 'rgb(239, 68, 68)', 'size': 14}
                    )
                ]
            )
            st.plotly_chart(fig, use_container_width=True)

        
        # Legut√≥bbi j√°t√©kok megjelen√≠t√©se
        st.markdown("### Legut√≥bb bet√∂lt√∂tt j√°t√©kok")
        recent_games = (df_filtered[df_filtered['action'] == 'load']
                       .sort_values('timestamp', ascending=False)
                       .head(5))
        
        # J√°t√©konk√©nt egy k√°rtya
        cols = st.columns(5)
        for idx, (_, game) in enumerate(recent_games.iterrows()):
            with cols[idx]:
                container = st.container()
                container.markdown(f"""
                    <div style='padding: 1rem; 
                                border-radius: 0.5rem; 
                                background-color: #1E1E1E; 
                                border: 1px solid #333;
                                margin: 0.25rem;'>
                        <div style='font-size: 0.9rem; color: #E0E0E0; margin-bottom: 0.5rem;'>
                            {game['game_title']}
                        </div>
                        <div style='font-size: 0.8rem; color: #808080;'>
                            {game['timestamp'].strftime('%Y-%m-%d %H:%M')}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

        # Legut√≥bb befejezett j√°t√©kok megjelen√≠t√©se
        st.markdown("### Legut√≥bb befejezett j√°t√©kok")
        recent_completions = (df_filtered[df_filtered['action'] == 'complete']
                            .sort_values('timestamp', ascending=False)
                            .head(5))
        
        # J√°t√©konk√©nt egy k√°rtya
        cols = st.columns(5)
        for idx, (_, game) in enumerate(recent_completions.iterrows()):
            with cols[idx]:
                container = st.container()
                container.markdown(f"""
                    <div style='padding: 1rem; 
                                border-radius: 0.5rem; 
                                background-color: #1E1E1E; 
                                border: 1px solid #333;
                                margin: 0.25rem;'>
                        <div style='font-size: 0.9rem; color: #E0E0E0; margin-bottom: 0.5rem;'>
                            {game['game_title']}
                        </div>
                        <div style='font-size: 0.8rem; color: #808080;'>
                            {game['timestamp'].strftime('%Y-%m-%d %H:%M')}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

        # Legut√≥bbi p√°nik gomb haszn√°latok
        st.markdown("### Legut√≥bbi p√°nik gomb haszn√°latok")
        recent_panics = (df_filtered[df_filtered['action'] == 'panic_button']
                        .sort_values('timestamp', ascending=False)
                        .head(5))
        
        # J√°t√©konk√©nt egy k√°rtya
        cols = st.columns(5)
        for idx, (_, game) in enumerate(recent_panics.iterrows()):
            with cols[idx]:
                container = st.container()
                container.markdown(f"""
                    <div style='padding: 1rem; 
                                border-radius: 0.5rem; 
                                background-color: #1E1E1E; 
                                border: 1px solid #333;
                                margin: 0.25rem;'>
                        <div style='font-size: 0.9rem; color: #E0E0E0; margin-bottom: 0.5rem;'>
                            {game['game_title']}
                        </div>
                        <div style='font-size: 0.8rem; color: #808080;'>
                            {game['timestamp'].strftime('%Y-%m-%d %H:%M')}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

        # Elv√°laszt√≥ a j√°t√©k k√°rty√°k ut√°n
        st.markdown("<hr style='margin: 2rem 0; border-color: #333;'>", unsafe_allow_html=True)
        
        # Grafikonok - id≈ëbeli eloszl√°s √©s legn√©pszer≈±bb j√°t√©kok
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("J√°t√©kok id≈ëbeli eloszl√°sa")
            
            # K√ºl√∂n dataframe-ek l√©trehoz√°sa az egyes esem√©nyekhez
            daily_loads = df_filtered[df_filtered['action'] == 'load'].groupby(
                df_filtered['timestamp'].dt.date).size().reset_index(name='loads')
            
            daily_completes = df_filtered[df_filtered['action'] == 'complete'].groupby(
                df_filtered['timestamp'].dt.date).size().reset_index(name='completes')
            
            daily_panics = df_filtered[df_filtered['action'] == 'panic_button'].groupby(
                df_filtered['timestamp'].dt.date).size().reset_index(name='panics')
            
            # Plotly figure l√©trehoz√°sa
            fig = go.Figure()
            
            # Bet√∂lt√©sek vonala (k√©k)
            fig.add_trace(go.Scatter(
                x=daily_loads['timestamp'],
                y=daily_loads['loads'],
                name='Bet√∂lt√©sek',
                line=dict(color='rgb(59, 130, 246)', width=2),
                hovertemplate='Bet√∂lt√©sek: %{y}<br>D√°tum: %{x}<extra></extra>'
            ))
            
            # Befejez√©sek vonala (z√∂ld)
            fig.add_trace(go.Scatter(
                x=daily_completes['timestamp'],
                y=daily_completes['completes'],
                name='Befejez√©sek',
                line=dict(color='rgb(34, 197, 94)', width=2),
                hovertemplate='Befejez√©sek: %{y}<br>D√°tum: %{x}<extra></extra>'
            ))
            
            # P√°nik gombok vonala (piros)
            fig.add_trace(go.Scatter(
                x=daily_panics['timestamp'],
                y=daily_panics['panics'],
                name='P√°nik gombok',
                line=dict(color='rgb(239, 68, 68)', width=2),
                hovertemplate='P√°nik gombok: %{y}<br>D√°tum: %{x}<extra></extra>'
            ))
            
            # Layout be√°ll√≠t√°sa
            fig.update_layout(
                title="Napi j√°t√©ksz√°m t√≠pusonk√©nt",
                xaxis_title="D√°tum",
                yaxis_title="J√°t√©kok sz√°ma",
                hovermode='x unified',
                showlegend=True,
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("Legn√©pszer≈±bb j√°t√©kok")
            
            # J√°t√©kok ind√≠t√°si, befejez√©si √©s p√°nik statisztik√°i
            starts = df_filtered[df_filtered['action'] == 'load'].groupby('game_title').size()
            completes = df_filtered[df_filtered['action'] == 'complete'].groupby('game_title').size()
            panics = df_filtered[df_filtered['action'] == 'panic_button'].groupby('game_title').size()
            
            # DataFrame l√©trehoz√°sa a h√°rom statisztik√°val
            game_stats = pd.DataFrame({
                'Ind√≠t√°sok': starts,
                'Befejez√©sek': completes,
                'P√°nik': panics
            }).fillna(0).sort_values('Ind√≠t√°sok', ascending=True).tail(10)
            
            # Plotly figure l√©trehoz√°sa
            fig = go.Figure()
            
            # Ind√≠t√°sok hozz√°ad√°sa
            fig.add_trace(go.Bar(
                name='Ind√≠t√°sok',
                y=game_stats.index,
                x=game_stats['Ind√≠t√°sok'],
                orientation='h',
                marker_color='rgb(59, 130, 246)',  # K√©k
                marker_line=dict(width=0),
                hovertemplate='Ind√≠t√°sok: %{x}<br>J√°t√©k: %{y}<extra></extra>'
            ))
            
            # Befejez√©sek hozz√°ad√°sa
            fig.add_trace(go.Bar(
                name='Befejez√©sek',
                y=game_stats.index,
                x=game_stats['Befejez√©sek'],
                orientation='h',
                marker_color='rgb(34, 197, 94)',  # Z√∂ld
                marker_line=dict(width=0),
                hovertemplate='Befejez√©sek: %{x}<br>J√°t√©k: %{y}<extra></extra>'
            ))

            # P√°nik hozz√°ad√°sa
            fig.add_trace(go.Bar(
                name='P√°nik',
                y=game_stats.index,
                x=game_stats['P√°nik'],
                orientation='h',
                marker_color='rgb(239, 68, 68)',  # Piros
                marker_line=dict(width=0),
                hovertemplate='P√°nik: %{x}<br>J√°t√©k: %{y}<extra></extra>'
            ))
            
            # Layout be√°ll√≠t√°sa
            fig.update_layout(
                title="Top 10 legn√©pszer≈±bb j√°t√©k",
                barmode='group',
                height=400,
                margin=dict(l=0, r=0, t=40, b=0),
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                ),
                xaxis_title="J√°t√©kok sz√°ma",
                hovermode='closest'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
        # Elv√°laszt√≥ a b√∂ng√©sz≈ë statisztik√°k el≈ëtt
        st.markdown("<hr style='margin: 2rem 0; border-color: #333;'>", unsafe_allow_html=True)
        
        # B√∂ng√©sz≈ë √©s eszk√∂z statisztik√°k
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("B√∂ng√©sz≈ë haszn√°lat")
            
            # B√∂ng√©sz≈ë adatok egyszer≈±s√≠t√©se
            def simplify_browser(browser_info):
                if 'Chrome' in browser_info:
                    if 'Mobil' in browser_info:
                        return 'Chrome (Mobil)'
                    return 'Chrome (Asztali)'
                elif 'Safari' in browser_info:
                    if 'Mobil' in browser_info:
                        return 'Safari (Mobil)'
                    return 'Safari (Asztali)'
                elif 'Firefox' in browser_info:
                    return 'Firefox'
                elif 'Edge' in browser_info:
                    return 'Edge'
                elif 'Mozilla' in browser_info:
                    if 'Mobile' in browser_info or 'iPhone' in browser_info:
                        return 'Egy√©b (Mobil)'
                    return 'Egy√©b (Asztali)'
                else:
                    return 'Egy√©b'

            # B√∂ng√©sz≈ëk csoportos√≠t√°sa
            df_filtered['simplified_browser'] = df_filtered['browser_info'].apply(simplify_browser)
            browser_stats = df_filtered['simplified_browser'].value_counts()
            
            # K√∂rdiagram l√©trehoz√°sa
            fig = go.Figure(data=[go.Pie(
                labels=browser_stats.index,
                values=browser_stats.values,
                hole=0.3,
                marker=dict(colors=['rgb(59, 130, 246)',   # K√©k
                                  'rgb(34, 197, 94)',      # Z√∂ld
                                  'rgb(239, 68, 68)',      # Piros
                                  'rgb(168, 85, 247)',     # Lila
                                  'rgb(251, 191, 36)',     # S√°rga
                                  'rgb(236, 72, 153)']),   # R√≥zsasz√≠n
            )])
            
            fig.update_layout(
                title="B√∂ng√©sz≈ë eloszl√°s",
                showlegend=True,
                legend=dict(
                    orientation="v",
                    yanchor="middle",
                    y=0.5,
                    xanchor="right",
                    x=1.1
                ),
                margin=dict(l=0, r=120, t=40, b=0),
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("K√©perny≈ëm√©retek")
            screen_stats = df_filtered['screen_size'].value_counts().head(10)
            fig = px.bar(screen_stats,
                        title="Leggyakoribb k√©perny≈ëm√©retek",
                        labels={'value': 'Darabsz√°m', 'index': 'K√©perny≈ëm√©ret'})
            st.plotly_chart(fig, use_container_width=True)

        # P√°nik gomb haszn√°lati statisztik√°k
        st.subheader("P√°nik gomb haszn√°lati statisztik√°k")
        col1, col2 = st.columns(2)
        
        with col1:
            # P√°nik gomb haszn√°lat id≈ëbeli eloszl√°sa
            panic_over_time = df_filtered[df_filtered['action'] == 'panic_button'].groupby(
                df_filtered['timestamp'].dt.date).size().reset_index()
            panic_over_time.columns = ['date', 'count']
            
            fig = px.line(panic_over_time, x='date', y='count',
                         title="P√°nik gomb haszn√°lat id≈ëbeli eloszl√°sa",
                         labels={'count': 'Haszn√°latok sz√°ma', 'date': 'D√°tum'})
            st.plotly_chart(fig, use_container_width=True)
            
        with col2:
            # P√°nik/Befejez√©s ar√°ny j√°t√©konk√©nt
            panic_rate = pd.DataFrame({
                'J√°t√©k': game_stats.index,
                'P√°nik ar√°ny': (game_stats['P√°nik'] / game_stats['Ind√≠t√°sok'] * 100).round(1)
            }).sort_values('P√°nik ar√°ny', ascending=True)
            
            fig = px.bar(panic_rate,
                        x='P√°nik ar√°ny',
                        y='J√°t√©k',
                        orientation='h',
                        title="P√°nik gomb haszn√°lati ar√°ny j√°t√©konk√©nt (%)",
                        labels={'P√°nik ar√°ny': 'Haszn√°lati ar√°ny (%)'})
            st.plotly_chart(fig, use_container_width=True)

        # Elv√°laszt√≥ a r√©szletes elemz√©s el≈ëtt
        st.markdown("<hr style='margin: 2rem 0; border-color: #333;'>", unsafe_allow_html=True)
        
        # Nyers adatok megjelen√≠t√©se
        st.subheader("Nyers adatok")
        if st.checkbox("Mutasd a nyers adatokat"):
            # Adatok form√°z√°sa a megjelen√≠t√©shez
            display_df = df_filtered.copy()
            display_df['timestamp'] = display_df['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
            
            # Oszlopok √°tnevez√©se a jobb √©rthet≈ës√©g √©rdek√©ben
            display_df = display_df.rename(columns={
                'timestamp': 'Id≈ëpont',
                'action': 'M≈±velet',
                'game_file': 'J√°t√©k f√°jl',
                'game_title': 'J√°t√©k c√≠me',
                'score': 'Pontsz√°m',
                'time': 'J√°t√©kid≈ë',
                'browser_info': 'B√∂ng√©sz≈ë',
                'screen_size': 'K√©perny≈ëm√©ret'
            })
            
            # M≈±veletek magyar√≠t√°sa
            display_df['M≈±velet'] = display_df['M≈±velet'].map({
                'load': 'Bet√∂lt√©s',
                'complete': 'Befejez√©s',
                'panic_button': 'P√°nik gomb haszn√°lat'
            })
            
            st.dataframe(display_df)
            
    except Exception as e:
        st.error(f"Hiba t√∂rt√©nt: {str(e)}")

if __name__ == "__main__":
    main()